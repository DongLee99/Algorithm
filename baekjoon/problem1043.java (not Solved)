import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashSet;
import java.util.StringTokenizer;

class main {

    static int[] parent;

    public static int find(int idx) {
        if (parent[idx] == idx) {
            return idx;
        }
        parent[idx] = find(parent[idx]);
        return parent[idx];
    }

    public static void union(int a, int b) {
        int parent_b = find(b);
        parent[parent_b] = a;
    }
    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(bf.readLine());

        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());

        parent = new int[N+1];
        for (int i = 1; i <= N; i++) {
            parent[i] = i;
        }

        String [] knowPeopleInfo = bf.readLine().split(" ");
        int kPN = Integer.parseInt(knowPeopleInfo[0]);
        boolean [] knowPeople = new boolean[N+1];
        if (kPN > 0) {
            for (int i = 1; i <= kPN; i++) {
                knowPeople[Integer.parseInt(knowPeopleInfo[i])] = true;
            }
        }
        HashSet<Integer> [] parties = new HashSet[M+1];
        for (int i = 1; i <= M; i++) {
            parties[i] = new HashSet<>();
            String [] tmp = bf.readLine().split(" ");

            int number = Integer.parseInt(tmp[0]);
            if (number <= 1) {
                parties[i].add(Integer.parseInt(tmp[1]));
                continue;
            }

            for (int j = 1; j < number; j++) {
                int a = Integer.parseInt(tmp[j]);
                int b = Integer.parseInt(tmp[j+1]);
                if (find(a) != find(b)) {
                    union(a, b);
                }
                parties[i].add(a);
                parties[i].add(b);
            }
        }

        boolean[] visited = new boolean[N + 1];
        for (int i = 1; i <= N; i++) {
            if (knowPeople[i] && !visited[i]) {
                int root = find(i);
                for (int j = 1; j <= N; j++) {
                    if (find(j) == root) {
                        knowPeople[j] = true;
                        visited[j] = true;
                    }
                }
            }
        }

        int result = 0;
        for (int i = 1; i <= M; i++) {
            boolean flag = false;
            for (int person :parties[i]) {
                if (knowPeople[person]) {
                    flag = true;
                    break;
                }
            }
            if (!flag)
                result++;
        }
        System.out.println(result);
    }
}